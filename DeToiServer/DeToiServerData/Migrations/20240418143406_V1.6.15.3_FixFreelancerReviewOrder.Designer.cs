// <auto-generated />
using System;
using DeToiServerData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeToiServerData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240418143406_V1.6.15.3_FixFreelancerReviewOrder")]
    partial class V16153_FixFreelancerReviewOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserPhone");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Phone");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CombinedPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ExpoPushToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LoginToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FreelanceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("FreelanceAccountId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Balance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardImage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("IdentityCardImageBack")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("None");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("bit");

                    b.Property<int>("LoveCount")
                        .HasColumnType("int");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("PositiveReviewCount")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("SystemBalance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamMemberCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalReviewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceServiceType", b =>
                {
                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FreelancerId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("FreelanceServiceTypes");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceSkill", b =>
                {
                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FreelancerId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("FreelanceSkills");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.SkillServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceTypeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillServiceTypes");
                });

            modelBuilder.Entity("DeToiServerCore.Models.BiddingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PreviewPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("OrderId");

                    b.ToTable("BiddingOrders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Favorite", b =>
                {
                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FreelancerId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Favorites", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.FrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FrequentlyAskedQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EstimatedPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreelancerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FreelancerRating")
                        .HasColumnType("float");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<double>("RecommendPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Payment.FreelancePaymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FreelanceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wallet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FreelanceAccountId");

                    b.ToTable("FreelancePaymentHistories");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequiredRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceCorrectQuestion", b =>
                {
                    b.Property<Guid>("ResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResultId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("FreelanceCorrectQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelanceQuizzes");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuizAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FreelanceQuizAnswers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfSkills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FreelanceQuizQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuizResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalCorrect")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("FreelanceQuizResults");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.QuizQuestion", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceActivationStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceActivationStatusId");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e"),
                            Description = "Bao gồm lau nhà, quét nhà, hút bụi, và nhiều dịch vụ khác",
                            Image = "https://detoivn.b-cdn.net/services/dondep/category.png",
                            Name = "Dọn dẹp",
                            ServiceClassName = "Cleaning"
                        },
                        new
                        {
                            Id = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f"),
                            Description = "Bao gồm đi chợ, siêu thị, nhà sách, và nhiều dịch vụ khác",
                            Image = "https://detoivn.b-cdn.net/services/dicho/category.png",
                            Name = "Mua sắm",
                            ServiceClassName = "Shopping"
                        },
                        new
                        {
                            Id = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a"),
                            Description = "Bao gồm sửa máy lạnh, tủ lạnh, và nhiều dịch vụ khác",
                            Image = "https://detoivn.b-cdn.net/services/suachua/category.png",
                            Name = "Sửa chữa",
                            ServiceClassName = "Repairing"
                        },
                        new
                        {
                            Id = new Guid("0f6f1894-3ee7-46a8-9939-842e3c620231"),
                            Description = "Bao gồm vệ sinh máy lạnh, tủ lạnh, ...",
                            Image = "https://detoivn.b-cdn.net/services/vesinhmaylanh/category.png",
                            Name = "Vệ sinh thiết bị",
                            ServiceClassName = "ElectronicsCleaning"
                        },
                        new
                        {
                            Id = new Guid("1b1a6ebd-2838-4b3d-a1f1-1818305df2d6"),
                            Description = "Chuyển nhà phòng trọ",
                            Image = "https://detoivn.b-cdn.net/services/chuyennhaphongtro/category.png",
                            Name = "Chuyển nhà, phòng trọ",
                            ServiceClassName = "Moving"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderServiceType", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("OrderServiceTypes");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderSkillRequired", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("OrderSkillsRequired");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalRequirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceActivationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceActivationStatus");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceProven", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageBefore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceProven");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a888efc3-1d7b-445a-b38c-758737b67bad"),
                            Name = "Đơn vừa tạo"
                        },
                        new
                        {
                            Id = new Guid("a53e9887-2186-4ff8-a009-f7706c800b52"),
                            Name = "Đang ghép cặp"
                        },
                        new
                        {
                            Id = new Guid("8a9f22f1-3c67-49f7-bd84-ec290e4a37fd"),
                            Name = "Chưa đến giờ hoạt động"
                        },
                        new
                        {
                            Id = new Guid("0815e9cf-98c7-4a6a-b27b-43d9b8d1f5a2"),
                            Name = "Đang di chuyển, hãy kiên nhẫn"
                        },
                        new
                        {
                            Id = new Guid("3f98b502-7245-4e86-b7b4-7db05357a1f8"),
                            Name = "Đang làm việc"
                        },
                        new
                        {
                            Id = new Guid("a7d1f0e8-2a6f-4b9d-aa1c-10f58a1d5d32"),
                            Name = "Đã hoàn thành nhiệm vụ"
                        },
                        new
                        {
                            Id = new Guid("0774e101-f1a3-4186-af1e-af95a26e9ead"),
                            Name = "Đơn đã hủy"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivationStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivationStatusId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603"),
                            BasePrice = 30000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dọn dẹp Phòng trọ",
                            Image = "https://detoivn.b-cdn.net/services/dondep/phongtro.png",
                            Name = "Phòng trọ",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("49a42267-d9dc-4e11-87a5-36525d4254d9"),
                            BasePrice = 55000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dọn dẹp Biệt thự",
                            Image = "https://detoivn.b-cdn.net/services/dondep/bietthu.png",
                            Name = "Biệt thự",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("ef2632f0-47bd-4bbe-a46f-628a28f03d8b"),
                            BasePrice = 50000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dọn dẹp Nhà / Nhà phố",
                            Image = "https://detoivn.b-cdn.net/services/dondep/n%C3%A2-nhapho.png",
                            Name = "Nhà / Nhà phố",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("dbb78597-043d-47c1-8810-93d392fd09ba"),
                            BasePrice = 40000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dọn dẹp Căn hộ chung cư",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Căn hộ chung cư",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("c82954a1-39d4-4012-86b3-6cad42c2b399"),
                            BasePrice = 40000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mua sắm hộ siêu nhanh",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Đi chợ hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("96d250d4-0c0e-4521-b94e-05f3cafca3f3"),
                            BasePrice = 50000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mua sắm hộ siêu nhanh",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Đi siêu thị hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("73bf981f-1cfd-483d-80ee-14ab6d2e55ef"),
                            BasePrice = 100000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mua sắm hộ siêu nhanh",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Đi siêu thị sang trọng",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("3779d349-abcb-4dbc-abf1-25ba9e94a695"),
                            BasePrice = 60000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mua sắm hộ siêu nhanh",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Đi mua quần áo",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("3361bc88-9f58-4be8-ac37-561606430f8a"),
                            BasePrice = 300000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mua sắm hộ siêu nhanh",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Đi mua giày camping",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("07cb166a-4b4e-4637-b224-6277a69003d9"),
                            BasePrice = 4000000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mua sắm hộ siêu nhanh",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Đi mua vé concert",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("a5677de0-a6a7-42c0-ab77-f34b75beb63d"),
                            BasePrice = 20000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mua sắm hộ siêu nhanh",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Đi mua vé xem phim",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("63ce2ebf-ef36-4b4a-891e-abbde2a75b38"),
                            BasePrice = 200000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sửa máy giặt",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Sửa máy giặt",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("f1b832b2-49f3-456f-bacb-b1f8da766bea"),
                            BasePrice = 200000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sửa chữa để tôi lo",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Sửa máy lạnh",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("b9f74f9e-f792-4c48-b1b6-b6f0bc402d07"),
                            BasePrice = 200000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sửa chữa để tôi lo",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Sửa bàn ủi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("88006a8c-d757-4b85-8b91-c88e6078fe9c"),
                            BasePrice = 200000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sửa chữa để tôi lo",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Sửa tivi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("662a64be-f7ea-4419-8978-dbf8f19159dc"),
                            BasePrice = 200000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sửa chữa để tôi lo",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Sửa ống nước",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("ef2034c1-7f44-4d07-b9c0-e2a497999a9d"),
                            BasePrice = 50000000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hãy yên tâm không nổ đâu",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Sửa bình gas",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("cca752d4-c17c-4c31-906f-f33cb8a18e48"),
                            BasePrice = 200000.0,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hãy yên tâm không nổ đâu",
                            Image = "https://detoivn.b-cdn.net/services/dondep/chungcu.jpg",
                            Name = "Sửa máy tính laptop",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementAdditionServiceRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoSelect")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("UIElementAdditionServiceRequirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5d70f47-92c3-409f-80cf-9a2791b8e76e"),
                            AutoSelect = true,
                            Icon = "faDog",
                            Key = "hasPets",
                            Label = "Nhà có thú cưng",
                            Priority = 0,
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("d4f67791-7303-4c8d-8cff-1308c28a0fb9"),
                            AutoSelect = false,
                            Icon = "faComputer",
                            Key = "hasElectronics",
                            Label = "Nhà có nhiều đồ điện tử",
                            Priority = 1,
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("7e4aa9dc-f9c6-4c31-9000-985e84f8c75c"),
                            AutoSelect = false,
                            Icon = "faBroom",
                            Key = "freelancerBringTools",
                            Label = "Nhân viên tự mang theo dụng cụ",
                            Priority = 2,
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UIElementInputMethodTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4"),
                            Name = "input"
                        },
                        new
                        {
                            Id = new Guid("49affbf6-08cb-4de7-a78c-b7ef741862ed"),
                            Name = "input"
                        },
                        new
                        {
                            Id = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "select"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InputMethodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodTypeId");

                    b.ToTable("UIElementInputOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38252d7c-8538-4ac1-8973-15486759c073"),
                            Description = "Tất cả dịch vụ, dọn toàn bộ nhà / phòng",
                            InputMethodTypeId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "Dọn trọn gói"
                        },
                        new
                        {
                            Id = new Guid("d62d23b4-f4b4-4323-9d28-fd499a37f1f0"),
                            Description = "Trung bình 50.000đ / phòng, tiết kiệm và nhanh chóng",
                            InputMethodTypeId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "Dọn theo phòng"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("UIElementServiceRequirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("771b6148-eed4-4552-a8f1-167049a87bfd"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Key = "addressLine",
                            Label = "Số nhà, số phòng, hẻm (ngõ)",
                            Placeholder = "Ví dụ: 257/43 Phòng 2014 Căn hộ Sunrise Continent",
                            Priority = 0,
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("0dd2bde1-e3af-47b0-8846-46a9b9c762ae"),
                            InputMethodId = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            Key = "cleanningType",
                            Label = "Bạn muốn chúng tôi dọn như thế nào?",
                            LabelIcon = "faFlag",
                            Placeholder = "Giúp nhân viên biết thêm về công việc cần làm",
                            Priority = 1,
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("abeb7f39-d1a7-4590-987f-d21741643358"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Key = "roomNumber",
                            Label = "Số lượng phòng",
                            LabelIcon = "faPersonShelter",
                            Placeholder = "Lưu ý: Nếu bạn chọn dịch vụ dọn theo phòng, vui lòng bổ sung số phòng cần dọn ở đây",
                            Priority = 2,
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("UIElementServiceRequirementInputMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            DataType = "text",
                            MethodId = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4")
                        },
                        new
                        {
                            Id = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            DataType = "text",
                            MethodId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609")
                        },
                        new
                        {
                            Id = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            DataType = "number",
                            MethodId = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementValidationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodId");

                    b.ToTable("UIElementValidationTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("043bda29-bf78-44b1-bd61-4b3bd70ea4ef"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("e231e90c-8b1a-47b7-94b7-7879afcf3c96"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 2.",
                            Name = "min",
                            Value = "0"
                        },
                        new
                        {
                            Id = new Guid("8fc0e5fb-64e1-4939-9f6a-3229f1b46a9f"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 3.",
                            Name = "max",
                            Value = "255"
                        },
                        new
                        {
                            Id = new Guid("54d325c0-0ea5-4b52-8983-52ce82c4fffe"),
                            InputMethodId = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            Message = "Thông báo valid input 2 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("5a86fc1d-af76-4382-911e-a7b5923abc91"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("f72ce1f3-930d-43dd-b3b8-6803c9a55576"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 2.",
                            Name = "min",
                            Value = "1"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.TermOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermOfServices");
                });

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.HasOne("DeToiServer.Models.User", "User")
                        .WithMany("Connections")
                        .HasForeignKey("UserPhone")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "CustomerAccount")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerAccountId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "FreelanceAccount")
                        .WithMany("Address")
                        .HasForeignKey("FreelanceAccountId");

                    b.Navigation("CustomerAccount");

                    b.Navigation("FreelanceAccount");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelancer")
                        .WithMany("FreelancerFeasibleServices")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("FreelancerInService")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceSkill", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelancer")
                        .WithMany("FreelanceSkills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.Skill", "Skill")
                        .WithMany("FreelanceSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.SkillServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("SkillOfService")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.Skill", "Skill")
                        .WithMany("ServiceTypeOfSkill")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceType");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DeToiServerCore.Models.BiddingOrder", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelancer")
                        .WithMany("BiddingOrders")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("BiddingOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Promotion", "Promotion")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Favorite", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelancer")
                        .WithMany("FavoriteBy")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelance")
                        .WithMany("Orders")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DeToiServerCore.Models.Services.ServiceStatus", "ServiceStatus")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("Freelance");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Payment.FreelancePaymentHistory", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "FreelanceAccount")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("FreelanceAccountId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("FreelanceAccount");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceCorrectQuestion", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Quiz.FreelanceQuizQuestion", "Question")
                        .WithMany("FreelanceCorrectQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Quiz.FreelanceQuizResult", "Result")
                        .WithMany("CorrectQuestions")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuiz", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelancer")
                        .WithMany("QuizCollection")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuizAnswer", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Quiz.FreelanceQuizQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuizResult", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Quiz.FreelanceQuiz", "Quiz")
                        .WithMany("FreelanceQuizResults")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.QuizQuestion", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Quiz.FreelanceQuizQuestion", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Quiz.FreelanceQuiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceActivationStatus", null)
                        .WithMany("ServiceCategories")
                        .HasForeignKey("ServiceActivationStatusId");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("OrderServiceTypes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("OrderServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderSkillRequired", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("SkillRequired")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.Skill", "Skill")
                        .WithMany("RequiredOrders")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceProven", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelancer")
                        .WithMany("ServiceProven")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("ServiceProven")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("ServiceProven")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Order");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceActivationStatus", "ActivationStatus")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("ActivationStatusId");

                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("ServiceCategoryId");

                    b.Navigation("ActivationStatus");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementAdditionServiceRequirement", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("AdditionalRequirements")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputOption", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", "InputMethodType")
                        .WithMany("Options")
                        .HasForeignKey("InputMethodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethodType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirement", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", "InputMethod")
                        .WithMany("ServiceRequirements")
                        .HasForeignKey("InputMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("Requirements")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethod");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", "Method")
                        .WithMany("InputMethods")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementValidationType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", "InputMethod")
                        .WithMany("Validation")
                        .HasForeignKey("InputMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethod");
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomerPromotions");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("BiddingOrders");

                    b.Navigation("FavoriteBy");

                    b.Navigation("FreelanceSkills");

                    b.Navigation("FreelancerFeasibleServices");

                    b.Navigation("Orders");

                    b.Navigation("PaymentHistories");

                    b.Navigation("QuizCollection");

                    b.Navigation("ServiceProven");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Skill", b =>
                {
                    b.Navigation("FreelanceSkills");

                    b.Navigation("RequiredOrders");

                    b.Navigation("ServiceTypeOfSkill");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Navigation("BiddingOrders");

                    b.Navigation("OrderServiceTypes");

                    b.Navigation("OrderServices");

                    b.Navigation("ServiceProven");

                    b.Navigation("SkillRequired");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Navigation("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuiz", b =>
                {
                    b.Navigation("FreelanceQuizResults");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuizQuestion", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("FreelanceCorrectQuestions");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Quiz.FreelanceQuizResult", b =>
                {
                    b.Navigation("CorrectQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceActivationStatus", b =>
                {
                    b.Navigation("ServiceCategories");

                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Navigation("AdditionalRequirements");

                    b.Navigation("FreelancerInService");

                    b.Navigation("OrderServiceTypes");

                    b.Navigation("Requirements");

                    b.Navigation("ServiceProven");

                    b.Navigation("Services");

                    b.Navigation("SkillOfService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", b =>
                {
                    b.Navigation("InputMethods");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.Navigation("ServiceRequirements");

                    b.Navigation("Validation");
                });
#pragma warning restore 612, 618
        }
    }
}
